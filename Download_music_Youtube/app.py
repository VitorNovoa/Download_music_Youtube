#Bibliotecas importadas para o projeto
import os
import yt_dlp
from itertools import count
from unidecode import unidecode

# Mensagem inicial e implementa√ß√£o da lista de m√∫sicas
print("üéµ Ol√°, bem-vindo ao downTube!! üéµ")
lista_musicas = []

#Fun√ß√£o que mostra o processo do download
def progresso_hook(d):
    #Condi√ß√£o If para mostrar o progresso do download da m√∫sica retornando em um print no terminal
    if d['status'] == 'downloading':
        print(f"‚¨áÔ∏è Baixando: {d.get('filename', 'arquivo')} | Progresso: {d.get('downloaded_bytes', 0) / 1024:.2f} KB")
    #Caso o download tenha sido finalizado retorna o status no terminal
    elif d['status'] == 'finished':
        print(f"‚úÖ Download finalizado: {d['filename']}")

#Fun√ß√£o que adiciona as m√∫sicas a lista para o download
def adiciona_musica(quantidade):
    #Loop While de tratativa de resposta da pergunta
    while True:
        #Vari√°vel que define o tipo/qualidade da m√∫sica, removendo todos os espa√ßos e deixando tudo em min√∫sculo
        tipo = str(input("Deseja a m√∫sica apenas de estudio? \n" 
                         "Sim ou N√£o \n")).strip().lower()
        
        #Condi√ß√£o de verifica√ß√£o do tipo para pegar a m√∫sica apenas de est√∫dio ou se ir√° receber ao vivo tamb√©m
        if unidecode(tipo) == "sim":
            tipo = "Lyrics"
            break

        #√â utilizado unidecode para convers√£o no padr√£o ANCII e n√£o gerar erros na resposta
        elif unidecode(tipo) == "nao":
            break

        #Caso seja uma resposta inv√°lida o else mostra o print de notifica√ß√£o e retorna a execu√ß√£o at√© conseguir chegar 
        #em uma resposta v√°lida para finalizar o Loop com o Break
        else:
            print("‚ö†Ô∏è Por favor digite uma op√ß√£o v√°lida!!! \n")      

    #Condi√ß√£o de verifica√ß√£o em caso seja mais de uma m√∫sica para poder inserir uma lista completa. 
    if quantidade > 1:
        #Loop While de tratativa de resposta da pergunta
        while True:
            #Vari√°vel de verifica√ß√£o de recebimento de uma string com v√°rias m√∫sicas ou uma inser√ß√£o uma por uma.
            musica_lista_musicas = str(input("Deseja adicionar uma lista de m√∫sicas de uma vez ? \n" "Sim - N√£o: \n")).strip().lower()
            
            #Condi√ß√£o que recebe uma string com todas as m√∫sicas de uma vez.
            if musica_lista_musicas == 'sim':
                #Vari√°vel que recebe uma lista m√∫sicas em uma string sendo necess√°rio obedecer o exemplo mostrado
                lista_varias_musicas = str(input("Digite a lista de m√∫sicas separando o artista da m√∫sica com - e o pr√≥ximo item com #. \n" 
                                                "Como no exemplo: Queen - We Are the Champions # Queen - We Will Rock You \n"  
                                                "Em caso de uma sintaxe diferente a busca n√£o encontrar√° a m√∫sica desejada!!!"))
                
                #Vari√°vel que separa as m√∫sicas em uma lista
                separa_itens = lista_varias_musicas.split("#")

                #Loop que separa os itens da lista de m√∫sica em Artista e M√∫sica
                for x in separa_itens:
                    artista_musica_lista = str(x).split('-')
                    artista = artista_musica_lista[0]
                    musica = artista_musica_lista[1]
                    artista = artista.lstrip()
                    #Concatena√ß√£o em uma string para busca com os dados de artista, m√∫sica e tipo
                    artista_musica = artista + " - " + musica + " - " + tipo
                    #Adi√ß√£o dos dados na lista de downloads
                    lista_musicas.append(artista_musica)
                break

            #Condi√ß√£o onde o usu√°rio ter√° que digitar artista e m√∫sica de forma manual e  um de cada vez
            elif unidecode(musica_lista_musicas) == "nao":
                #Vari√°veis de recebimento dos dados
                artista = input(f"N¬∞{quantidade} - Digite o nome de um artista v√°lido: \n")
                musica = input(f"N¬∞{quantidade} - Agora digite o nome de uma m√∫sica que o artista possua: \n")
                #Concatena√ß√£o em uma string para busca com os dados de artista, m√∫sica e tipo
                artista_musica = artista + " - " + musica + " - " + tipo
                #Adi√ß√£o dos dados na lista de downloads
                lista_musicas.append(artista_musica)
                break

            #Caso seja uma resposta inv√°lida o else mostra o print de notifica√ß√£o e retorna a execu√ß√£o at√© conseguir chegar 
            #Em uma resposta v√°lida para finalizar o Loop com o Break
            else:
                print("‚ö†Ô∏è Por favor digite uma op√ß√£o v√°lida!!! \n")

    #Condi√ß√£o onde o usu√°rio ter√° que digitar artista e m√∫sica de forma manual e  um de cada vez
    else:
        #Vari√°veis de recebimento dos dados
        artista = input(f"N¬∞{quantidade} - Digite o nome de um artista v√°lido: \n")
        musica = input(f"N¬∞{quantidade} - Agora digite o nome de uma m√∫sica que o artista possua: \n")
        #Concatena√ß√£o em uma string para busca com os dados de artista, m√∫sica e tipo
        artista_musica = artista + " - " + musica + " - " + tipo
        #Adi√ß√£o dos dados na lista de downloads
        lista_musicas.append(artista_musica)

#Fun√ß√£o que monta a lista de m√∫sicas
def monta_lista_musica():
    #Loop While de tratativa de resposta da pergunta
    while True:
        #Try de tratativa de dados 
        try:
            #Vari√°vel que recebe a quantidade de m√∫sicas a serem baixadas
            quantidade = int(input("Digite a quantidade de m√∫sicas que voc√™ quer inserir na lista de downloads (apenas n√∫meros): \n"))
            
            #Condi√ß√£o que o usu√°rio ir√° digitar um n√∫mero v√°lido
            if quantidade < 1:
                print("‚ö†Ô∏è Por favor digite uma op√ß√£o v√°lida!!! \n")
                continue

            #Chamada da fun√ß√£o de adi√ß√£o das m√∫sicas nas listas
            adiciona_musica(quantidade)
            #Print de apresenta√ß√£o das m√∫sicas adicionadas para verifica√ß√£o 
            print("üéµ Sua lista de downloads atual: \n")
            #Loop de apresenta√ß√£o da lista de m√∫sicas com uma formata√ß√£o dos dados
            for i, item in enumerate(lista_musicas, start=1):
                print(f"{i}. {item}")
            break
        #Exe√ß√£o em caso seja digitado um dado diferente de um n√∫mero
        except ValueError:
            print("‚ö†Ô∏è Entrada inv√°lida! Por favor digite apenas n√∫meros.\n")

#Fun√ß√£o de download das m√∫sicas
def baixa_musicas(musica):
    #Vari√°veis de defini√ß√£o da pasta e cria√ß√£o da mesma caso ela n√£o exista
    path_down = os.path.join(os.getcwd(), "downloads")
    os.makedirs(path_down, exist_ok=True)
    #Vari√°vel de concatena√ß√£o dos dados da m√∫sica com os par√¢metros de pesquisa
    url = f"ytsearch1:{musica}"  
    #Defini√ß√£o dos par√¢metros da pesquisa para download pela biblioteca
    options = {
        'format': 'bestaudio/best', #Formato do √°udio
        'outtmpl': f'{path_down}/%(title)s.%(ext)s', #Caminho e nome do arquivo ap√≥s o download
        'noplaylist': True, #Remove os v√≠deos de playlist
        'quiet': True,  #Silencia mensagens internas
        'progress_hooks': [progresso_hook], #Pega os par√¢metros de download para mostrar o progresso
        #Define o formato e como ser√° convertido o √°udio
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
        }]
    }
    #Chamada da biblioteca passando os par√¢metros para download
    with yt_dlp.YoutubeDL(options) as ydl:
        ydl.download([url])

#Loop de execu√ß√£o do programa
while True:
    #Chamada da fun√ß√£o para montar a lista de m√∫sicas para downloads
    monta_lista_musica()
    #Loop While de tratativa de resposta da pergunta
    while True:
        #Vari√°vel de verifica√ß√£o se caso o usu√°rio queira adicionar mais m√∫sicas
        opcao_add = input("Deseja inserir mais alguma m√∫sica √† lista de download? (Sim ou N√£o): \n").strip().lower()
        #Condi√ß√£o de verifica√ß√£o da resposta
        if unidecode(opcao_add) in ["sim", "nao"]:
            break
        #Tratativa em caso a resposta seja inv√°lida
        else:
            print("‚ö†Ô∏è Op√ß√£o inv√°lida! Por favor digite Sim ou N√£o.\n")

    #Condi√ß√£o que finaliza o processo do loop para retornar ao processo de adi√ß√£o de m√∫sicas
    if unidecode(opcao_add) == "sim":
        continue  #Volta para adicionar mais m√∫sicas
    
    print("Baixando as m√∫sicas, porfavor aguarde!!!")
    #Loop de realiza√ß√£o dos downloads
    for musica in lista_musicas:
        #Chamada da fun√ß√£o de download dos arquivos 
        baixa_musicas(musica)

    print("‚úÖ M√∫sicas abaixo baixadas com sucesso na pasta 'downloads'!\n")
    #Loop de apresenta√ß√£o da lista de m√∫sicas baixadas
    for i, item in enumerate(lista_musicas, start=1):
        print(f"{i}. {item}")

    #Loop While de tratativa de resposta da pergunta 
    while True:
        #Vari√°vel de condi√ß√£o de finaliza√ß√£o do programa
        encerrar = input('Deseja baixar mais m√∫sicas ou encerrar o programa? (Baixar/Encerrar): ').strip().lower()
        
        #Condi√ß√£o para finaliza√ß√£o do programa ou continua√ß√£o de mais um processo de download
        if encerrar in ["baixar", "encerrar"]:
            break
        #Tratativa em caso a resposta seja inv√°lida
        else:
            print("‚ö†Ô∏è Op√ß√£o inv√°lida! Por favor digite uma das op√ß√µes v√°lidas - Baixar ou Encerrar")

    #Condi√ß√£o para finaliza√ß√£o do programa
    if encerrar == "encerrar":
        print("üëã Encerrando o programa. At√© a pr√≥xima!")
        break
    #Caso n√£o deseje finalizar o programa
    else:
        lista_musicas = []  #Limpa lista para pr√≥xima rodada